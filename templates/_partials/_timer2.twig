<div 
    x-data="countdownTimer('{{ entry.timer | date('F j, Y H:i:s', 'America/New_York') }}')"
    x-init="startCountdown()"
    class="countdown-timer bg-green-50 rounded-lg shadow-sm p-4 max-w-xl mx-auto my-6 border border-green-100">
    <h2 class="">This Event Coming Soon!</h2>
    <div class="grid grid-cols-4 gap-3 text-center max-w-md pb-2 ">
        <div class="countdown-segment bg-green-200 rounded-lg p-1 text-green-900">
            <div x-text="padZero(days)" class="text-2xl font-bold">00</div>
            <div class="text-xs uppercase tracking-wide mt-1">Days</div>
        </div>
        <div class="countdown-segment bg-green-200 rounded-lg p-1 text-green-900">
            <div x-text="padZero(hours)" class="text-2xl font-bold">00</div>
            <div class="text-xs uppercase tracking-wide mt-1">Hours</div>
        </div>
        <div class="countdown-segment bg-green-200 rounded-lg p-1 text-green-900">
            <div x-text="padZero(minutes)" class="text-2xl font-bold">00</div>
            <div class="text-xs uppercase tracking-wide mt-1">Minutes</div>
        </div>
        <div class="countdown-segment bg-green-200 rounded-lg p-1 text-green-900">
            <div x-text="padZero(seconds)" class="text-2xl font-bold">00</div>
            <div class="text-xs uppercase tracking-wide mt-1">Seconds</div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('countdownTimer', (targetDate) => ({
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0,
            countdownInterval: null,
            targetTimestamp: new Date(targetDate).getTime(),
            
            startCountdown() {
                this.updateCountdown();
                this.countdownInterval = setInterval(() => {
                    this.updateCountdown();
                }, 1000);
            },
            
            updateCountdown() {
                const now = new Date().getTime();
                const timeRemaining = this.targetTimestamp - now;
                
                if (timeRemaining > 0) {
                    this.days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
                    this.hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    this.minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
                    this.seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
                } else {
                    clearInterval(this.countdownInterval);
                    this.days = 0;
                    this.hours = 0;
                    this.minutes = 0;
                    this.seconds = 0;
                }
            },
            
            padZero(num) {
                return num.toString().padStart(2, "0");
            }
        }));
    });
</script>
